[config]
# exp_mode will create another sub-directory to save the training results for further research
exp_mode    = False
exp_name    = WebTrain
save_model  = True

# path setting, all path are set online by default, read the data split or 

data_info       = ./data_info.json
class_path      = None
data_path       = ./
checkpoint_path = ./
log_dir         = ./
config_path     = ./
train_config    = ./

# stack image argument, means channel for each stack image.

del_uncertain   = True
channel_list    = None

# Override online by training-code automatically

ok_index        = -1
num_classes     = -1
class_name_list = []
label_index     = {}
data_mean       = [0.5071, 0.4867, 0.4408]
data_stdv       = [0.2675, 0.2565, 0.2761]
channels        = 3
validation_rate = 1./6

# Data split callable function
split_func      = simple_imgfolder

# Data augmentation setting, you can set w_scale and h_scale to the desire input-size.  

height          = 224
width           = 224
w_scale         = 1.0
h_scale         = 1.0
diff_trans      = False
resize          = True
noise           = False
crop_padding    = True
color_jitter    = False
random_h_flip   = False
random_v_flip   = False
random_rotation = False
rotation_scale  = 15


# network, training details

net_name           = densenet49
cuda_ok            = True
resume_train_epoch = None
num_workers        = 4
seed               = 2020
verbose            = False
optimizer          = sgd
warm_up            = True
lr_scheduler       = CosStep
early_stopping     = False
only_classifier    = False

# training hyper-parameters
epochs             = 200
learning_rate      = 0.01
batch_size         = 64
weight_decay       = 1e-4

# early-stopping
criteria           = val_acc
mode               = min

# Speed the Training-Process(amp only works when pytorch>=1.6.0), sparsity-regularization on BatchNorm2d
amp      = False
sr       = False
sr_scale = 0.0001


# Loss, Re-weighting... (To be continued)
loss          = CrossEntropy
loss_params   = {}

# class-weight setting
class_weight        = False
class_weight_params = {'methods': 'CB', 'beta': 0.999}

# Data Re-Sampling Strategy, Examples: sample_ratio [1,2,4,6], sample_epoch = [50, 100, 150]

sampler             = False
sp_strategy         = fix
sample_ratio        = None
sample_epoch        = None
ok_sample_ratio     = 0
notok_sample_ratio  = 1
max_upsample_num    = 10

# Adversarial Samples
advprop    = False
batch_type = nn.BatchNorm2d
